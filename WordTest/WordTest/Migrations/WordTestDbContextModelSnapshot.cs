// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WordTest.Data;

namespace WordTest.Migrations
{
    [DbContext(typeof(WordTestDbContext))]
    partial class WordTestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WordTest.Models.AppPage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<string>("Path")
                        .HasColumnName("w_path")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasColumnName("w_type")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.ToTable("tb_apppage");
                });

            modelBuilder.Entity("WordTest.Models.EnglishBook", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.ToTable("tb_englishbook");
                });

            modelBuilder.Entity("WordTest.Models.EnglishBookUnit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("BookId")
                        .HasColumnName("w_book");

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.ToTable("tb_englishbookunit");
                });

            modelBuilder.Entity("WordTest.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Code")
                        .HasColumnName("w_code")
                        .HasMaxLength(10);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.ToTable("tb_role");
                });

            modelBuilder.Entity("WordTest.Models.RolePage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("AppPageId")
                        .HasColumnName("w_apppage")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<string>("RoleId")
                        .HasColumnName("w_role")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.HasIndex("AppPageId");

                    b.HasIndex("RoleId");

                    b.ToTable("tb_rolepage");
                });

            modelBuilder.Entity("WordTest.Models.Task", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("AswerId")
                        .HasColumnName("w_aswer")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<int>("ErrorCount")
                        .HasColumnName("w_errorcount");

                    b.Property<int>("Grade")
                        .HasColumnName("w_grade");

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<float>("Rate")
                        .HasColumnName("w_rate");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("w_status")
                        .HasMaxLength(10);

                    b.Property<string>("TaskCreatorId")
                        .HasColumnName("w_taskcreator")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.Property<int>("rightCount")
                        .HasColumnName("w_rightcount");

                    b.HasKey("Id");

                    b.HasIndex("AswerId");

                    b.HasIndex("TaskCreatorId");

                    b.ToTable("tb_task");
                });

            modelBuilder.Entity("WordTest.Models.TaskWord", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<string>("Status")
                        .HasColumnName("w_status")
                        .HasMaxLength(10);

                    b.Property<string>("TaskId")
                        .HasColumnName("w_task")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.Property<string>("WordId")
                        .HasColumnName("w_word")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WordId");

                    b.ToTable("tb_taskword");
                });

            modelBuilder.Entity("WordTest.Models.UnitWord", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<string>("SoundName")
                        .HasColumnName("w_Soundname")
                        .HasMaxLength(20);

                    b.Property<string>("SoundPath")
                        .HasColumnName("w_soundpath")
                        .HasMaxLength(20);

                    b.Property<string>("UnitId")
                        .HasColumnName("w_unit")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("tb_unitword");
                });

            modelBuilder.Entity("WordTest.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("w_id")
                        .HasMaxLength(64);

                    b.Property<string>("Acc")
                        .HasColumnName("w_acc");

                    b.Property<int>("Age")
                        .HasColumnName("w_age");

                    b.Property<string>("Creator")
                        .HasColumnName("w_creator")
                        .HasMaxLength(32);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("w_gender");

                    b.Property<DateTime>("Inserttime")
                        .HasColumnName("w_inserttime");

                    b.Property<string>("Name")
                        .HasColumnName("w_name")
                        .HasMaxLength(20);

                    b.Property<string>("Operator")
                        .HasColumnName("w_operator")
                        .HasMaxLength(32);

                    b.Property<string>("Pwd")
                        .HasColumnName("w_pwd");

                    b.Property<string>("RoleId")
                        .HasColumnName("w_userrole")
                        .HasMaxLength(64);

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnName("w_updatetime");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("tb_user");
                });

            modelBuilder.Entity("WordTest.Models.EnglishBookUnit", b =>
                {
                    b.HasOne("WordTest.Models.EnglishBook", "Book")
                        .WithMany()
                        .HasForeignKey("BookId");
                });

            modelBuilder.Entity("WordTest.Models.RolePage", b =>
                {
                    b.HasOne("WordTest.Models.AppPage", "AppPage")
                        .WithMany()
                        .HasForeignKey("AppPageId");

                    b.HasOne("WordTest.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("WordTest.Models.Task", b =>
                {
                    b.HasOne("WordTest.Models.User", "Aswer")
                        .WithMany()
                        .HasForeignKey("AswerId");

                    b.HasOne("WordTest.Models.User", "TaskCreator")
                        .WithMany()
                        .HasForeignKey("TaskCreatorId");
                });

            modelBuilder.Entity("WordTest.Models.TaskWord", b =>
                {
                    b.HasOne("WordTest.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId");

                    b.HasOne("WordTest.Models.UnitWord", "Word")
                        .WithMany()
                        .HasForeignKey("WordId");
                });

            modelBuilder.Entity("WordTest.Models.UnitWord", b =>
                {
                    b.HasOne("WordTest.Models.EnglishBookUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");
                });

            modelBuilder.Entity("WordTest.Models.User", b =>
                {
                    b.HasOne("WordTest.Models.Role", "UserRole")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
